# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

input CreateManyOrdersInput {
  """Array of records to create"""
  orders: [CreateOrder!]!
}

input CreateManyProductsInput {
  """Array of records to create"""
  products: [CreateProduct!]!
}

input CreateManyUserTokensInput {
  """Array of records to create"""
  userTokens: [CreateUserToken!]!
}

input CreateManyUsersInput {
  """Array of records to create"""
  users: [CreateUser!]!
}

input CreateOneOrderInput {
  """The record to create"""
  order: CreateOrder!
}

input CreateOneProductInput {
  """The record to create"""
  product: CreateProduct!
}

input CreateOneUserInput {
  """The record to create"""
  user: CreateUser!
}

input CreateOneUserTokenInput {
  """The record to create"""
  userToken: CreateUserToken!
}

input CreateOrder {
  amount: Float!
  image: String!
  pizza: String!
  quantity: Float!
  size: String!
  status: String!
  table: Float!
  userId: String!
}

input CreateProduct {
  description: String!
  imageFiles: [UploadScalar!]!
  name: String!
  priceSizeL: Float!
  priceSizeM: Float!
  priceSizeS: Float!
}

input CreateUser {
  email: String!
  isAdmin: Boolean
  name: String!
  password: String!
}

input CreateUserToken {
  expiresAt: DateTime!
  refreshToken: String!
  userId: String!
}

input DateFieldComparison {
  between: DateFieldComparisonBetween
  eq: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  is: Boolean
  isNot: Boolean
  lt: DateTime
  lte: DateTime
  neq: DateTime
  notBetween: DateFieldComparisonBetween
  notIn: [DateTime!]
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteManyOrdersInput {
  """Filter to find records to delete"""
  filter: OrderDeleteFilter!
}

input DeleteManyProductsInput {
  """Filter to find records to delete"""
  filter: ProductDeleteFilter!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

input DeleteManyUserTokensInput {
  """Filter to find records to delete"""
  filter: UserTokenDeleteFilter!
}

input DeleteManyUsersInput {
  """Filter to find records to delete"""
  filter: UserDeleteFilter!
}

input DeleteOneOrderInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneProductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneUserInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneUserTokenInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteProduct {
  id: String!
  isSoft: Boolean
}

input IDFilterComparison {
  eq: ID
  gt: ID
  gte: ID
  iLike: ID
  in: [ID!]
  is: Boolean
  isNot: Boolean
  like: ID
  lt: ID
  lte: ID
  neq: ID
  notILike: ID
  notIn: [ID!]
  notLike: ID
}

input LoginInput {
  email: String!
  password: String
}

type LoginResponse {
  tokens: TokensType!
  user: User!
}

input LogoutInput {
  userId: String!
}

type Mutation {
  createManyOrders(input: CreateManyOrdersInput!): [Order!]!
  createManyProducts(input: CreateManyProductsInput!): [Product!]!
  createManyUserTokens(input: CreateManyUserTokensInput!): [UserToken!]!
  createManyUsers(input: CreateManyUsersInput!): [User!]!
  createOneOrder(input: CreateOneOrderInput!): Order!
  createOneProduct(input: CreateOneProductInput!): Product!
  createOneUser(input: CreateOneUserInput!): User!
  createOneUserToken(input: CreateOneUserTokenInput!): UserToken!
  createProduct(input: CreateProduct!): Product!
  deleteManyOrders(input: DeleteManyOrdersInput!): DeleteManyResponse!
  deleteManyProducts(input: DeleteManyProductsInput!): DeleteManyResponse!
  deleteManyUserTokens(input: DeleteManyUserTokensInput!): DeleteManyResponse!
  deleteManyUsers(input: DeleteManyUsersInput!): DeleteManyResponse!
  deleteOneOrder(input: DeleteOneOrderInput!): OrderDeleteResponse!
  deleteOneProduct(input: DeleteOneProductInput!): ProductDeleteResponse!
  deleteOneUser(input: DeleteOneUserInput!): UserDeleteResponse!
  deleteOneUserToken(input: DeleteOneUserTokenInput!): UserTokenDeleteResponse!
  deleteProduct(input: DeleteProduct!): Boolean!
  login(input: LoginInput!): LoginResponse!
  logout(input: LogoutInput!): Boolean!
  removeUserFromUserToken(input: RemoveUserFromUserTokenInput!): UserToken!
  resetPassword(input: ResetPasswordInput!): Boolean!
  restoreManyOrders(input: OrderFilter!): UpdateManyResponse!
  restoreManyProducts(input: ProductFilter!): UpdateManyResponse!
  restoreManyUsers(input: UserFilter!): UpdateManyResponse!
  restoreOneProduct(input: ID!): Product!
  restoreOneUser(input: ID!): User!
  sendPasswordResetEmail(input: SendPasswordResetEmailInput!): Boolean!
  setUserOnUserToken(input: SetUserOnUserTokenInput!): UserToken!
  updateManyOrders(input: UpdateManyOrdersInput!): UpdateManyResponse!
  updateManyProducts(input: UpdateManyProductsInput!): UpdateManyResponse!
  updateManyUserTokens(input: UpdateManyUserTokensInput!): UpdateManyResponse!
  updateManyUsers(input: UpdateManyUsersInput!): UpdateManyResponse!
  updateOneOrder(input: UpdateOneOrderInput!): Order!
  updateOneProduct(input: UpdateOneProductInput!): Product!
  updateOneUser(input: UpdateOneUserInput!): User!
  updateOneUserToken(input: UpdateOneUserTokenInput!): UserToken!
  updateProduct(input: UpdateProduct!): Product!
}

input NumberFieldComparison {
  between: NumberFieldComparisonBetween
  eq: Float
  gt: Float
  gte: Float
  in: [Float!]
  is: Boolean
  isNot: Boolean
  lt: Float
  lte: Float
  neq: Float
  notBetween: NumberFieldComparisonBetween
  notIn: [Float!]
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

type Order {
  amount: Float!
  createdAt: DateTime
  deletedAt: DateTime
  id: ID!
  image: String!
  pizza: String!
  quantity: Float!
  size: String!
  status: String!
  table: Float!
  updatedAt: DateTime
  userId: String!
}

type OrderAggregateGroupBy {
  createdAt: DateTime
  deletedAt: DateTime
  id: ID
  pizza: String
  status: String
  table: Float
  updatedAt: DateTime
  userId: String
}

type OrderAvgAggregate {
  table: Float
}

type OrderConnection {
  """Array of nodes."""
  nodes: [Order!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type OrderCountAggregate {
  createdAt: Int
  deletedAt: Int
  id: Int
  pizza: Int
  status: Int
  table: Int
  updatedAt: Int
  userId: Int
}

input OrderDeleteFilter {
  and: [OrderDeleteFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: IDFilterComparison
  or: [OrderDeleteFilter!]
  pizza: StringFieldComparison
  status: StringFieldComparison
  table: NumberFieldComparison
  updatedAt: DateFieldComparison
  userId: StringFieldComparison
}

type OrderDeleteResponse {
  amount: Float
  createdAt: DateTime
  deletedAt: DateTime
  id: ID
  image: String
  pizza: String
  quantity: Float
  size: String
  status: String
  table: Float
  updatedAt: DateTime
  userId: String
}

input OrderFilter {
  and: [OrderFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: IDFilterComparison
  or: [OrderFilter!]
  pizza: StringFieldComparison
  status: StringFieldComparison
  table: NumberFieldComparison
  updatedAt: DateFieldComparison
  userId: StringFieldComparison
}

type OrderMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: ID
  pizza: String
  status: String
  table: Float
  updatedAt: DateTime
  userId: String
}

type OrderMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: ID
  pizza: String
  status: String
  table: Float
  updatedAt: DateTime
  userId: String
}

input OrderSort {
  direction: SortDirection!
  field: OrderSortFields!
  nulls: SortNulls
}

enum OrderSortFields {
  createdAt
  deletedAt
  id
  pizza
  status
  table
  updatedAt
  userId
}

type OrderSumAggregate {
  table: Float
}

input OrderUpdateFilter {
  and: [OrderUpdateFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: IDFilterComparison
  or: [OrderUpdateFilter!]
  pizza: StringFieldComparison
  status: StringFieldComparison
  table: NumberFieldComparison
  updatedAt: DateFieldComparison
  userId: StringFieldComparison
}

type Product {
  createdAt: DateTime
  deletedAt: DateTime
  description: String!
  id: ID!
  imageDirs: [String!]
  name: String!
  priceSizeL: Float!
  priceSizeM: Float!
  priceSizeS: Float!
  updatedAt: DateTime
}

type ProductAggregateGroupBy {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: ID
  name: String
  priceSizeL: Float
  priceSizeM: Float
  priceSizeS: Float
  updatedAt: DateTime
}

type ProductAvgAggregate {
  priceSizeL: Float
  priceSizeM: Float
  priceSizeS: Float
}

type ProductConnection {
  """Array of nodes."""
  nodes: [Product!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type ProductCountAggregate {
  createdAt: Int
  deletedAt: Int
  description: Int
  id: Int
  name: Int
  priceSizeL: Int
  priceSizeM: Int
  priceSizeS: Int
  updatedAt: Int
}

input ProductDeleteFilter {
  and: [ProductDeleteFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  description: StringFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [ProductDeleteFilter!]
  priceSizeL: NumberFieldComparison
  priceSizeM: NumberFieldComparison
  priceSizeS: NumberFieldComparison
  updatedAt: DateFieldComparison
}

type ProductDeleteResponse {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: ID
  imageDirs: [String!]
  name: String
  priceSizeL: Float
  priceSizeM: Float
  priceSizeS: Float
  updatedAt: DateTime
}

input ProductFilter {
  and: [ProductFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  description: StringFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [ProductFilter!]
  priceSizeL: NumberFieldComparison
  priceSizeM: NumberFieldComparison
  priceSizeS: NumberFieldComparison
  updatedAt: DateFieldComparison
}

type ProductMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: ID
  name: String
  priceSizeL: Float
  priceSizeM: Float
  priceSizeS: Float
  updatedAt: DateTime
}

type ProductMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: ID
  name: String
  priceSizeL: Float
  priceSizeM: Float
  priceSizeS: Float
  updatedAt: DateTime
}

input ProductSort {
  direction: SortDirection!
  field: ProductSortFields!
  nulls: SortNulls
}

enum ProductSortFields {
  createdAt
  deletedAt
  description
  id
  name
  priceSizeL
  priceSizeM
  priceSizeS
  updatedAt
}

type ProductSumAggregate {
  priceSizeL: Float
  priceSizeM: Float
  priceSizeS: Float
}

input ProductUpdateFilter {
  and: [ProductUpdateFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  description: StringFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [ProductUpdateFilter!]
  priceSizeL: NumberFieldComparison
  priceSizeM: NumberFieldComparison
  priceSizeS: NumberFieldComparison
  updatedAt: DateFieldComparison
}

type Query {
  me: User!
  order(
    """The id of the record to find."""
    id: ID!
  ): Order
  orders(
    """Specify to filter the records returned."""
    filter: OrderFilter = {}

    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to sort results."""
    sorting: [OrderSort!] = []
  ): OrderConnection!
  product(
    """The id of the record to find."""
    id: ID!
  ): Product
  products(
    """Specify to filter the records returned."""
    filter: ProductFilter = {}

    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to sort results."""
    sorting: [ProductSort!] = []
  ): ProductConnection!
  user(
    """The id of the record to find."""
    id: ID!
  ): User
  userToken(
    """The id of the record to find."""
    id: ID!
  ): UserToken
  userTokens(
    """Specify to filter the records returned."""
    filter: UserTokenFilter = {}

    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to sort results."""
    sorting: [UserTokenSort!] = []
  ): UserTokenConnection!
  users(
    """Specify to filter the records returned."""
    filter: UserFilter = {}

    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to sort results."""
    sorting: [UserSort!] = []
  ): UserConnection!
}

input RemoveUserFromUserTokenInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input ResetPasswordInput {
  password: String!
  refreshToken: String!
}

input SendPasswordResetEmailInput {
  email: String!
}

input SetUserOnUserTokenInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

type TokensType {
  accessToken: String!
  refreshToken: String!
}

input UpdateManyOrdersInput {
  """Filter used to find fields to update"""
  filter: OrderUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateOrder!
}

input UpdateManyProductsInput {
  """Filter used to find fields to update"""
  filter: ProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProduct!
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

input UpdateManyUserTokensInput {
  """Filter used to find fields to update"""
  filter: UserTokenUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateUserToken!
}

input UpdateManyUsersInput {
  """Filter used to find fields to update"""
  filter: UserUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateUser!
}

input UpdateOneOrderInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateOrder!
}

input UpdateOneProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProduct!
}

input UpdateOneUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateUser!
}

input UpdateOneUserTokenInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateUserToken!
}

input UpdateOrder {
  amount: Float
  image: String
  pizza: String
  quantity: Float
  size: String
  status: String
  table: Float
  userId: String
}

input UpdateProduct {
  currentImageDirs: [String!]
  description: String
  id: String!
  imageFiles: [UploadScalar!]
  name: String
  priceSizeL: Float
  priceSizeM: Float
  priceSizeS: Float
}

input UpdateUser {
  email: String
  isAdmin: Boolean
  name: String
  password: String
}

input UpdateUserToken {
  expiresAt: DateTime
  id: ID
  refreshToken: String
  userId: String
}

scalar UploadScalar

type User {
  createdAt: DateTime
  deletedAt: DateTime
  email: String!
  id: ID!
  isAdmin: Boolean!
  name: String!
  updatedAt: DateTime
}

type UserAggregateGroupBy {
  createdAt: DateTime
  deletedAt: DateTime
  email: String
  id: ID
  isAdmin: Boolean
  name: String
  updatedAt: DateTime
}

type UserConnection {
  """Array of nodes."""
  nodes: [User!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type UserCountAggregate {
  createdAt: Int
  deletedAt: Int
  email: Int
  id: Int
  isAdmin: Int
  name: Int
  updatedAt: Int
}

input UserDeleteFilter {
  and: [UserDeleteFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  email: StringFieldComparison
  id: IDFilterComparison
  isAdmin: BooleanFieldComparison
  name: StringFieldComparison
  or: [UserDeleteFilter!]
  updatedAt: DateFieldComparison
}

type UserDeleteResponse {
  createdAt: DateTime
  deletedAt: DateTime
  email: String
  id: ID
  isAdmin: Boolean
  name: String
  updatedAt: DateTime
}

input UserFilter {
  and: [UserFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  email: StringFieldComparison
  id: IDFilterComparison
  isAdmin: BooleanFieldComparison
  name: StringFieldComparison
  or: [UserFilter!]
  updatedAt: DateFieldComparison
}

type UserMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  email: String
  id: ID
  name: String
  updatedAt: DateTime
}

type UserMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  email: String
  id: ID
  name: String
  updatedAt: DateTime
}

input UserSort {
  direction: SortDirection!
  field: UserSortFields!
  nulls: SortNulls
}

enum UserSortFields {
  createdAt
  deletedAt
  email
  id
  isAdmin
  name
  updatedAt
}

type UserToken {
  expiresAt: DateTime!
  id: ID!
  refreshToken: String!
  user: User!
  userId: String!
}

type UserTokenAggregateGroupBy {
  id: ID
  refreshToken: String
  userId: String
}

type UserTokenConnection {
  """Array of nodes."""
  nodes: [UserToken!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type UserTokenCountAggregate {
  id: Int
  refreshToken: Int
  userId: Int
}

input UserTokenDeleteFilter {
  and: [UserTokenDeleteFilter!]
  id: IDFilterComparison
  or: [UserTokenDeleteFilter!]
  refreshToken: StringFieldComparison
  userId: StringFieldComparison
}

type UserTokenDeleteResponse {
  expiresAt: DateTime
  id: ID
  refreshToken: String
  userId: String
}

input UserTokenFilter {
  and: [UserTokenFilter!]
  id: IDFilterComparison
  or: [UserTokenFilter!]
  refreshToken: StringFieldComparison
  user: UserTokenFilterUserFilter
  userId: StringFieldComparison
}

input UserTokenFilterUserFilter {
  and: [UserTokenFilterUserFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  email: StringFieldComparison
  id: IDFilterComparison
  isAdmin: BooleanFieldComparison
  name: StringFieldComparison
  or: [UserTokenFilterUserFilter!]
  updatedAt: DateFieldComparison
}

type UserTokenMaxAggregate {
  id: ID
  refreshToken: String
  userId: String
}

type UserTokenMinAggregate {
  id: ID
  refreshToken: String
  userId: String
}

input UserTokenSort {
  direction: SortDirection!
  field: UserTokenSortFields!
  nulls: SortNulls
}

enum UserTokenSortFields {
  id
  refreshToken
  userId
}

input UserTokenUpdateFilter {
  and: [UserTokenUpdateFilter!]
  id: IDFilterComparison
  or: [UserTokenUpdateFilter!]
  refreshToken: StringFieldComparison
  userId: StringFieldComparison
}

input UserUpdateFilter {
  and: [UserUpdateFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  email: StringFieldComparison
  id: IDFilterComparison
  isAdmin: BooleanFieldComparison
  name: StringFieldComparison
  or: [UserUpdateFilter!]
  updatedAt: DateFieldComparison
}